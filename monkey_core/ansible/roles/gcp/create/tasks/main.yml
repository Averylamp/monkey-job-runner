---
  # tasks:
- name: create a instance
  gcp_compute_instance:
    state: present
    name: "{{ monkey_job_uid }}"
    machine_type: n1-standard-2
    status: "RUNNING"
    deletion_protection: no
    labels:
      monkey-identifier: avery
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          disk_size_gb: 10
          disk_type: pd-standard
          source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts"
          
    network_interfaces:
      - access_configs:
          - name: "External NAT"
            type: "ONE_TO_ONE_NAT"
    metadata:
      enable-oslogin: "TRUE"
    service_accounts:
      - email: "{{ gcp_service_email }}"
        scopes: 
          - 'https://www.googleapis.com/auth/devstorage.read_write'
          - 'https://www.googleapis.com/auth/logging.write'
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    scheduling:
      preemptible: yes
    scopes:
      - https://www.googleapis.com/auth/compute
    tags:
      items:
        - "{{ firewall_rule }}"
  register: instance
  retries: 2
  delay: 2
  # Sometimes doesn't imediately return natIP so retry
  until: "'natIP' in instance.networkInterfaces.0.accessConfigs.0"

- name: Debug
  debug:
    msg: instance

- name: Assert public ip address
  set_fact:
    public_ip: "{{ instance.networkInterfaces.0.accessConfigs.0.natIP }}"
  register: found_public_ip
  until: found_public_ip is not failed
  delay: 5
  retries: 10
  ignore_errors: true
- name:  Debug public ip
  debug:
    msg: public ip "{{ public_ip }}"

- name: Wait for SSH to come up
  wait_for: 
    host: "{{ public_ip }}"
    port: 22
    timeout: 15
  register: wait_for_ssh
  delay: 2
  until: wait_for_ssh is not failed
  retries: 4
  ignore_errors: true

- name: Get keyscan host key
  command: "ssh-keyscan -trsa  {{ public_ip }}"
  retries: 3
  delay: 2
  register: host_key_task
  until: host_key_task.rc == 0
- name: Set host key fact
  set_fact:
    host_key: "{{ host_key_task.stdout }}"

- name: Remove old known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: absent
    regexp: "{{ public_ip }}.*"
- name: Add to known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: present
    line: "{{ host_key }}"

- name: Debug new host info
  debug:
    msg: "Host {{public_ip}} User {{ gcp_user}} "
- name: Add host to groupname
  add_host: 
    name: "{{ public_ip }}"
    groups:
      - "new_host"
      - "monkey_gcp"
    ansible_user: "{{ gcp_user }}"
    ansible_ssh_private_key_file: "{{ gcp_ssh_private_key_file }}"
