---
  # tasks:
- name: Include GCP variables
  include_vars:
    file: "{{ gcp_cred_file }}"
- name: create a firewall rule
  gcp_compute_firewall:
    description: "An ansible generated firewall rule to allow ssh and monkey ports"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    name: "{{ firewall_rule }}"
    allowed:
      - ip_protocol: 'tcp'
        ports:
          - "22"
          - "80"
          - "9991"
      - ip_protocol: 'udp'
        ports:
          - "22"
          - "80"
          - "9991"
    target_tags:
      - "{{ firewall_rule }}"
    state: present
- name: create a instance
  gcp_compute_instance:
    state: present
    name: "monkey-{{ uid }}"
    machine_type: n1-standard-1
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          disk_size_gb: 10
          disk_type: pd-standard
          source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts"
          
    network_interfaces:
      - access_configs:
          - name: "External NAT"
            type: "ONE_TO_ONE_NAT"
    metadata:
      enable-oslogin: "TRUE"
    service_accounts:
      - email: "{{ client_email }}"
        scopes: 
          - 'https://www.googleapis.com/auth/devstorage.read_write'
          - 'https://www.googleapis.com/auth/logging.write'
    zone: "{{ zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    scheduling:
      preemptible: yes
    scopes:
      - https://www.googleapis.com/auth/compute
    tags:
      items:
        - "{{ firewall_rule }}"
  register: instance
- name: Assert public ip address
  set_fact:
    public_ip: "{{ instance.networkInterfaces.0.accessConfigs.0.natIP }}"
- name:  Debug public ip
  debug:
    msg: public ip "{{ public_ip }}"
- name: Wait for SSH to come up
  wait_for: 
    host: "{{ public_ip }}"
    port: 22
    timeout: 60

- name: Get keyscan host key
  set_fact:
    host_key: "{{ lookup('pipe', 'ssh-keyscan -trsa ' + public_ip) }}"
- name: Remove old known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: absent
    regexp: "{{ public_ip }}.*"
- name: Add to known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: present
    line: "{{ host_key }}"

- name: Add host to groupname
  add_host: 
    name: "{{ public_ip }}"
    groups:
      - "new_host"
    ansible_user: "{{ ansible_user }}"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
