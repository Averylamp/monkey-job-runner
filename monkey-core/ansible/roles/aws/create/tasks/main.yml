---
  # tasks:
# - name: Include AWS variables
#   include_vars:
#     file: "{{ gcp_cred_file }}"

- name: Set default instance params
  set_fact:
    disk_size_gb: "{{disk_size_gb | default('10')}}"
    disk_type: "{{disk_type | default('gp2')}}"
    machine_type: "{{machine_type | default('t2.micro')}}"
    base_image: "{{base_image | default('ami-0bcc094591f354be2')}}"
    existing_found: False

- name: Check to start existing ec2 Instance
  community.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ monkey_job_uid }}"
    region: "{{ aws_region }}"

  register: existing_instance
  ignore_errors: true

- name: Set facts for existing
  when: existing_instance.instances|length > 0
  set_fact:
    existing_found: True

- name: Check Terminated
  when:
    - existing_found is true
    - existing_instance.instances.0.state.name == "terminated"
  debug:
    msg: "Existing already terminated"

- name: Existing is already terminated, create new
  when:
    - existing_found is true
    - existing_instance.instances.0.state.name == "terminated"
  set_fact:
    existing_found: False

- name: Turn on ec2 Instance
  when: existing_found is true 
  amazon.aws.ec2:
    count_tag: 
      Name: "{{ monkey_job_uid }}"
    instance_type: "{{machine_type}}"
    instance_tags:
      Name: "{{ monkey_job_uid }}"
      Monkey: "Monkey_AWS"
    state: running
    wait: yes
    group: Monkey_Security_Group
    vpc_subnet_id: "{{monkey_subnet_id}}"
    region: "{{ aws_region }}"
    zone: "{{ aws_zone }}"
    volumes:
      - device_name: "/dev/sda1"
        delete_on_termination: true
        volume_size: "{{disk_size_gb}}"
        volume_type: "{{disk_type}}"
  register: existing_instance
- name: Create ec2 Instance
  when: existing_found is false
  amazon.aws.ec2:
    exact_count: 1
    count_tag: 
      Name: "{{ monkey_job_uid }}"
    instance_type: "{{machine_type}}"
    instance_tags:
      Name: "{{ monkey_job_uid }}"
      Monkey: "Monkey_AWS"
    image: "{{base_image}}"
    key_name: "{{ aws_key_name }}"
    wait: yes
    group: Monkey_Security_Group
    vpc_subnet_id: "{{monkey_subnet_id}}"
    assign_public_ip: yes
    region: "{{ aws_region }}"
    zone: "{{ aws_zone }}"
    volumes:
      - device_name: "/dev/sda1"
        delete_on_termination: true
        volume_size: "{{disk_size_gb}}"
        volume_type: "{{disk_type}}"
  register: instance

- name: Set facts for existing
  when: existing_found is true
  set_fact:
    instance: "{{ existing_instance.instances.0 }}"
- name: Set facts for existing
  when: existing_found is false
  set_fact:
    instance: "{{ instance.tagged_instances.0 }}"

- name:  Debug instance
  debug:
    msg: "{{ instance }}"

- name: Set public ip address
  set_fact:
    public_ip: "{{ instance.public_ip}}"

- name: Wait for SSH to come up
  wait_for: 
    host: "{{ public_ip }}"
    port: 22
    timeout: 15
  register: wait_for_ssh
  delay: 2
  until: wait_for_ssh is not failed
  retries: 5
  ignore_errors: true



- name: Get keyscan host key
  command: "ssh-keyscan -trsa  {{ public_ip }}"
  retries: 3
  delay: 2
  register: host_key_task
  until: host_key_task.rc == 0
- name: Set host key fact
  set_fact:
    host_key: "{{ host_key_task.stdout }}"

- name: Remove old known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: absent
    regexp: "{{ public_ip }}.*"
- name: Add to known hosts
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    state: present
    line: "{{ host_key }}"

- name: Add host to groupname
  add_host: 
    name: "{{ public_ip }}"
    groups:
      - "new_host"
    ansible_user: "ubuntu"
    ansible_ssh_private_key_file: "keys/{{ aws_key_name }}.pem"
