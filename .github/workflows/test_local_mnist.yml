name: Provider Local

on:
  push:
    branches: [ master, develop, actions ]
  pull_request:
    branches: [ master, develop ]

jobs:
  mnist_local_test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        shell: bash
        working-directory: monkey_core

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip3-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip3-
          ${{ runner.os }}-
      
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements.txt
        
    - name: Docker Compose Mongo setup
      run: |
        docker-compose up -d

    - name: Setup Provider
      run: |
        ./flush_all_provider_data.sh || true
        python3 setup_core.py --create --noinput --type local --name local --local-host localhost --localhost-only
        df -h
        ls -al ~
      
        
    - name: Install monkey_cli packages
      run: |
        pip install .
        pip install -r requirements.txt
      working-directory: monkey_cli

    - name: Setup folders
      run: |
        mkdir -p data output
      working-directory: monkey_cli/samples/mnist

    - name: Cache mnist data
      uses: actions/cache@v1
      id: cache-mnist-data
      with:
        path: monkey_cli/samples/mnist/data
        key: ${{ hashFiles('monkey_cli/samples/mnist/download_data.py') }}
    
    - name: Cache miss on mnist data
      if: steps.cache-mnist-data.outputs.cache-hit != 'true'
      run: |
        python3 -m pip install torchvision
        mkdir -p data output
        python3 download_data.py
      working-directory: monkey_cli/samples/mnist

    - name: Run mnist sample
      run: |
        python3 monkey_core.py &
        sleep 15
        cd ../monkey_cli/samples/mnist
        ls -al ~
        tree
        cp ci/local_conda_job.yml job.yml
        sleep 2
        monkey run --foreground -i localhost python3 -u mnist.py --learning-rate 0.019 --n-epochs 1

    - name: Cleanup and unmount
      run: |
        echo "Cleanup"
        # BUCKET_NAME=$(cat ansible/aws_vars.yml | grep storage_name | awk '{ print $2 }')
        # echo Bucket Name: $BUCKET_NAME

