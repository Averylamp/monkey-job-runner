---
#  Unique name to separate the project
name: mnist

run:
  # env_type can be conda or pip
  # TODO(@alamp): Implement pip environment restoration
  env_type: conda
  # env_file should be the conda environment or pip environment
  # for conda to generate: conda env export
  # for pip to generate:   pip freeze
  env_file: environment.yml
  # Any additional environment variables specified
  env:
    - TEST_ENV: "HELLO"
  # Terminate the instance after finishing
  terminate: true
  # Install Script (Optional)
  install_script:

install:
# Installs each of the system dependencies.  
# Current available options: conda, 
# Future options: docker, cuda10.2, nvidia-docker
  - conda

code:
  # Path of the codebase.  Use . for cwd, use relative dir for directory
  path: "."
  # Patterns to ignore from the code (Make sure to include unncessary folders that will be created such as virtualenv folders or data folders)
  ignore:
    - "data**"
    - "output**"
    - "venv**"

# Define folders to persist throughout runs.  Should include your output or checkpoint directory
# Any defined persist folder will be kept in persistent storage and applied over the codebase at start
# Persisted folders will be unpacked in the order they are listed
persist:
  - name: output
    # Must be a relative dir
    path: output

    # TODO(@alamp): Implement ignoring files in persisted store
    # ignore:
    # - "output/testfile"

data:
  - name: mnist-data
    # Options are copy or mount,  mount will mount the bucket, copy will copy the data to the machine locally (more performant)
    # only copy is supported for now
    type: copy
    # Path should be a relative directory
    path: data
    # optional compression type. (Must have compression packages available on machine)  Options: tar (default), gztar
    compression: gztar

providers:
  # Specifications of GCP machines to run on
  - name: gcp
    
    # TODO(@alamp): implement machine options passthrough
    machine_type: n1-standard-2
    disk_size_gb: 10
    disk_type: pd-standard
    source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts"
    preemptible: true
  
